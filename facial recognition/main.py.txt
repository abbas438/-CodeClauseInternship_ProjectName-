import face_recognition
import cv2
import os

# Load known face(s)
known_face_encodings = []
known_face_names = []

for filename in os.listdir("known_faces"):
    if filename.endswith(".jpg") or filename.endswith(".png"):
        path = os.path.join("known_faces", filename)
        name = os.path.splitext(filename)[0].replace("_", " ")
        image = face_recognition.load_image_file(path)
        encodings = face_recognition.face_encodings(image)
        if encodings:
            known_face_encodings.append(encodings[0])
            known_face_names.append(name)

# Load test image
test_image = face_recognition.load_image_file("test.jpg")
test_image_bgr = cv2.cvtColor(test_image, cv2.COLOR_RGB2BGR)

# Detect faces in the test image
face_locations = face_recognition.face_locations(test_image)
face_encodings = face_recognition.face_encodings(test_image, face_locations)

# Draw boxes and labels
for (top, right, bottom, left), face_encoding in zip(face_locations, face_encodings):
    matches = face_recognition.compare_faces(known_face_encodings, face_encoding)
    name = "Unknown"

    face_distances = face_recognition.face_distance(known_face_encodings, face_encoding)
    best_match_index = face_distances.argmin() if len(face_distances) > 0 else -1

    if best_match_index >= 0 and matches[best_match_index]:
        name = known_face_names[best_match_index]

    # Draw rectangle and label
    cv2.rectangle(test_image_bgr, (left, top), (right, bottom), (0, 255, 0), 2)
    cv2.rectangle(test_image_bgr, (left, bottom - 20), (right, bottom), (0, 255, 0), cv2.FILLED)
    cv2.putText(test_image_bgr, name, (left + 5, bottom - 5),
                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1)

# Show final result
cv2.imshow("Face Recognition", test_image_bgr)
cv2.waitKey(0)
cv2.destroyAllWindows()
